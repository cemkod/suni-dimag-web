{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus-dark/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus-dark/source/images/theme overview.psd","path":"images/theme overview.psd","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus-dark/LICENSE","hash":"4d5f5f360a18c68f0fd1897bdb1eb1210c2893e3","modified":1502127002684},{"_id":"themes/cactus-dark/README.md","hash":"f38b2f4771eeccc0ae0959ac3e3c485a9d159d4a","modified":1502127002216},{"_id":"themes/cactus-dark/_config.yml","hash":"5f3c89ef2106e892f12d46636e784a9b6b50ee26","modified":1502127002096},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer.md","hash":"802391caa7b13b3201a0e35cd7644135db1b18fc","modified":1502127002084},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale.md","hash":"e61e77a0418db7cec4ae164632ec1e28b73915c0","modified":1502134347897},{"_id":"source/_posts/Tensorflow-ve-Keras-kurulumu.md","hash":"17f985a926a66d34acba35af4f2b4b6aad4365c7","modified":1502127002056},{"_id":"themes/cactus-dark/layout/archive.ejs","hash":"74c3966430de4f00976308aa32c1c0f5199d76a6","modified":1502127002740},{"_id":"themes/cactus-dark/layout/index.ejs","hash":"532bf729a742d29b9762f93f719818dccb37e08a","modified":1502127002740},{"_id":"themes/cactus-dark/layout/layout.ejs","hash":"8484532ad7c4da22f46fc1394bb2fd9ded34be1f","modified":1502127002684},{"_id":"themes/cactus-dark/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1502127002720},{"_id":"themes/cactus-dark/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1502127002740},{"_id":"themes/cactus-dark/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1502127002744},{"_id":"themes/cactus-dark/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1502127002740},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/1.png","hash":"54f1f12a33781d082fac902cd093af5b33994310","modified":1502127002080},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/2.png","hash":"79f0d263cac244b4508bb242f6c0c5b047c67298","modified":1502127002064},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/3.png","hash":"16a24e180c4244ac2cb08e4e4c85ce9c1f7ec105","modified":1502127002072},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/4.png","hash":"98463c26f3e9a40d4b26f9510e0dbbf7e006ca24","modified":1502127002072},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/1.png","hash":"d74c440254c332aa8ffe42d2f4d405a8bcc12472","modified":1502133922227},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/2.png","hash":"fedfd0d55355920b6ebbd7f46a9f7417498f15df","modified":1502134007127},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/3.png","hash":"fdf58cc84fe276264a0626535f090faa24bf7ae3","modified":1502134117356},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/4.png","hash":"f4cdf0da8f4c26cb9e2a8f392c986516f093fb61","modified":1502134147900},{"_id":"themes/cactus-dark/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1502127002720},{"_id":"themes/cactus-dark/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1502127002720},{"_id":"themes/cactus-dark/layout/_partial/head.ejs","hash":"43600a1d96b1744b0603ddafdd875e4571c5f450","modified":1502127002720},{"_id":"themes/cactus-dark/layout/_partial/header.ejs","hash":"841b11ab26f617689c1b9d79ce0a3c5c3b10178c","modified":1502127002700},{"_id":"themes/cactus-dark/layout/_partial/pagination.ejs","hash":"ca660c59aec56daa4a7b41715b97434d4a24c37e","modified":1502127002684},{"_id":"themes/cactus-dark/layout/_partial/scripts.ejs","hash":"6cffa3adb2f5b93a47f29549ac589c8bce8c223e","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/styles.ejs","hash":"e62b799d8ac369d1f1b36bd2649ecc34aec3384c","modified":1502127002684},{"_id":"themes/cactus-dark/source/css/_extend.styl","hash":"8a53c44cd44639fa0bcdb0c789e1f489f39c14db","modified":1502127002588},{"_id":"themes/cactus-dark/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1502127002660},{"_id":"themes/cactus-dark/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1502127002588},{"_id":"themes/cactus-dark/source/css/_variables.styl","hash":"369e98ad25a19ff344e14e1ea75de50ea8a41919","modified":1502127002676},{"_id":"themes/cactus-dark/source/css/style.styl","hash":"944b8f1957213b553b12d9692a9ce4281344bd70","modified":1502127002624},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1502127002280},{"_id":"themes/cactus-dark/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1502127002228},{"_id":"themes/cactus-dark/source/images/logo.png","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1502127002224},{"_id":"themes/cactus-dark/source/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1502127002684},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1502127002216},{"_id":"themes/cactus-dark/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1502127002700},{"_id":"themes/cactus-dark/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1502127002704},{"_id":"themes/cactus-dark/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1502127002704},{"_id":"themes/cactus-dark/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1502127002624},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1502127002600},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1502127002624},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1502127002600},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1502127002600},{"_id":"themes/cactus-dark/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1502127002600},{"_id":"themes/cactus-dark/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1502127002624},{"_id":"themes/cactus-dark/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1502127002600},{"_id":"themes/cactus-dark/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1502127002624},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1502127002624},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1502127002608},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1502127002612},{"_id":"themes/cactus-dark/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1502127002616},{"_id":"themes/cactus-dark/source/css/_partial/archive.styl","hash":"18fa7f84a9783c5fb56c9f450ea93bd88408e682","modified":1502127002648},{"_id":"themes/cactus-dark/source/css/_partial/article.styl","hash":"04ac7ea81b5ebb34850276e21812f7c329be64dc","modified":1502127002644},{"_id":"themes/cactus-dark/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1502127002648},{"_id":"themes/cactus-dark/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1502127002648},{"_id":"themes/cactus-dark/source/css/_partial/header.styl","hash":"2244e646483caafbb04f5646f0134af95ecb58b6","modified":1502127002644},{"_id":"themes/cactus-dark/source/css/_partial/index.styl","hash":"f42b64641da4a1f417cd4087e1c41c3356cea583","modified":1502127002660},{"_id":"themes/cactus-dark/source/css/_partial/pagination.styl","hash":"03a1b81d60dae3dd55963b7e74a6fee83470e6bb","modified":1502127002648},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1502127002304},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1502127002320},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1502127002328},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502127002528},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_desktop.styl","hash":"2bbbb20ae8a99bc08fb95ba0ec8f39ed6ccb8534","modified":1502127002648},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_mobile.styl","hash":"e6a802d7ee1023c5fc5fac18bb0ba3dc03ef2ac8","modified":1502127002648},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502127002536},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502127002532},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502127002536},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502127002572},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502127002564},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502127002576},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502127002560},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502127002572},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1502127002360},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1502127002340},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1502127002440},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1502127002420},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1502127002452},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1502127002368},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1502127002492},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1502127002432},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1502127002512},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1502127002408},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1502127002520},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1502127002388},{"_id":"themes/cactus-dark/source/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1502127002276},{"_id":"public/archives/index.html","hash":"d78f0c5296312f060d9f0cbfa4c2cb0f1c592533","modified":1502134397758},{"_id":"public/archives/2017/index.html","hash":"7246802f8dc44f1ab3e8b69c148e2127c2cee94b","modified":1502134397759},{"_id":"public/archives/2017/08/index.html","hash":"abed925672806cc1c7724c8f1f23ca9fd39e8349","modified":1502134397759},{"_id":"public/index.html","hash":"045aa22fd0e40b22f92400f38f0040bbcf162a65","modified":1502134397759},{"_id":"public/2017/08/07/102-Veri-muhendisligi-y-de-bias-ve-scale/index.html","hash":"e35c6553df4e0e9883881dfb813972da662a51e7","modified":1502134397759},{"_id":"public/2017/08/04/101-Ilk-yapay-sinir-agimiz-Dense-layer/index.html","hash":"79a475791b579a58e2d8a1041aad5c4ef66edb28","modified":1502134397760},{"_id":"public/2017/08/03/Tensorflow-ve-Keras-kurulumu/index.html","hash":"b4da7bdac62c9a50b6c61c42b177743ee3c3cf86","modified":1502134397760},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1502134397769},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1502134397769},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1502134397770},{"_id":"public/images/logo.png","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1502134397770},{"_id":"public/2017/08/04/101-Ilk-yapay-sinir-agimiz-Dense-layer/1.png","hash":"54f1f12a33781d082fac902cd093af5b33994310","modified":1502134397770},{"_id":"public/2017/08/04/101-Ilk-yapay-sinir-agimiz-Dense-layer/2.png","hash":"79f0d263cac244b4508bb242f6c0c5b047c67298","modified":1502134397770},{"_id":"public/2017/08/04/101-Ilk-yapay-sinir-agimiz-Dense-layer/3.png","hash":"16a24e180c4244ac2cb08e4e4c85ce9c1f7ec105","modified":1502134397770},{"_id":"public/2017/08/04/101-Ilk-yapay-sinir-agimiz-Dense-layer/4.png","hash":"98463c26f3e9a40d4b26f9510e0dbbf7e006ca24","modified":1502134397770},{"_id":"public/2017/08/07/102-Veri-muhendisligi-y-de-bias-ve-scale/1.png","hash":"d74c440254c332aa8ffe42d2f4d405a8bcc12472","modified":1502134397770},{"_id":"public/2017/08/07/102-Veri-muhendisligi-y-de-bias-ve-scale/2.png","hash":"fedfd0d55355920b6ebbd7f46a9f7417498f15df","modified":1502134397770},{"_id":"public/2017/08/07/102-Veri-muhendisligi-y-de-bias-ve-scale/3.png","hash":"fdf58cc84fe276264a0626535f090faa24bf7ae3","modified":1502134397770},{"_id":"public/2017/08/07/102-Veri-muhendisligi-y-de-bias-ve-scale/4.png","hash":"f4cdf0da8f4c26cb9e2a8f392c986516f093fb61","modified":1502134397770},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502134398103},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502134398105},{"_id":"public/js/main.js","hash":"2703a7cb4fc7056d13215b9fde675da426b9cdc4","modified":1502134398112},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1502134398112},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1502134398112},{"_id":"public/css/style.css","hash":"168a2fe54569ff7035cfdf4fcab5b8277f3eb0c6","modified":1502134398112},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1502134398113},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502134398113},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502134398113},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502134398113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502134398113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502134398113},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502134398113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502134398130},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1502134398135},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1502134398135},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1502134398136},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1502134398137},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1502134398137},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1502134398138},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1502134398138},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1502134398138},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1502134398138},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1502134398138},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1502134398139},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1502134398139},{"_id":"public/images/theme overview.psd","hash":"8dc11d9d289c247423911e962c4eb3a556dc67d1","modified":1502134398156}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"101 - İlk yapay sinir ağımız, Dense layer","date":"2017-08-04T18:49:42.000Z","_content":"##### Bu yazıdaki tüm kodları jupyter notebook formatında, [Suni Dimağ github repository](https://github.com/azmesai/suni-dimag)'sinden çekebilirsiniz.\n\nBu örnekte ilk yapay sinir ağımızı gürültülü veri ile sinüs fonksiyonunu taklit etmek üzere eğiteceğiz.\n\n```python\n%matplotlib inline\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nimport random\nimport matplotlib.pyplot as plt\nimport math\n```\n\n## Training set (Öğrenme kümesi)'nin oluşturulması\n\nİlk olarak ağımızı eğitmek için kullanacağımız training set'i oluşturuyoruz. Ağın sinüs fonksiyonunu öğrenmesini istiyoruz, bu yüzden X radyan olarak rastgele açı değerleri, y ilgili açının sinüsü olacak şekilde 600 tane örnek oluşturuyoruz.\n\nGerçek dünyada gürültü içermeyen çok az veri vardır. Yapay sinir ağlarının gürültülü veriyle bile genelleme yapabilme gücünü  gösterebilmek için y değerlerini rastgele bir miktar kaydırıyorum. Gürültünün miktarıyla noiserate değişkenini değiştirerek oynayabilirsiniz.\n\n{% codeblock lang:python %}\nnoiserate = 0.2\nX = []\ny = []\nfor i in range(0,600):\n    angle=random.uniform(-math.pi,math.pi)\n    X.append(angle)\n    y.append(math.sin(angle)+random.uniform(-noiserate,noiserate))\n\nplt.scatter(X,y,s=0.1)\nplt.xlabel('x (Radyan)')\nplt.ylabel('sin(x)')\nplt.legend()\nplt.show()\n{% endcodeblock %}\n\n![](1.png#white)\n\n## Modelin oluşturulması\n\nModelimiz iki katmandan oluşuyor. İlk katmanda 80 adet nöron var ve bunların her birinin girişi verimizin girdisine *(X)*, yani açı değişkenine bağlı. Ayrıca bu katmandaki nöronların herbirinin çıkışı *RELU* adı verilen bir aktivasyon fonksiyonundan geçiyor ama şimdilik bunu umursayın. Bu konuya daha sonra değineceğim. İkinci katmanda ise tek bir nöron var. İlk katmandaki tüm nöronların çıkışları, bu tek nörona bağlanıyor. Bu tek nöronun çıkışı da bizim sinüs değerimizi *(y)* verecek.\n\nModelimizi eğitebilmek için bir *loss* fonksiyonu seçmemiz gerekli. Loss fonksiyonu çıkışımın, istediğimiz değere ne kadar uzak olduğunu gösteren bir fonksiyon. Aslında öğrenme işleminin yaptığı şey bu değeri minimize etmeye çalışmak. Ben burada *Mean Square Error* (Karesel ortalama hata) fonksiyonunu seçtim.\n\nDiğer ihtiyacımız olan şey ise bir *optimizer*, yani *loss*'un nöronların birbirleriyla bağlantı ağırlıklarını güncellemek için nasıl dağıtılacağını belirleyen algoritmamız. Bunun için de en basit *optimizer* algoritmalarından biri olan *Stochastic Gradient Descent* algoritmasını seçtim.\n\n```python\nmodel = Sequential()\nmodel.add(Dense(80, input_shape=(1,), activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='sgd')\n```\n\n## Eğitim şart\n\nArtık `model.fit()` fonksiyonunu çağırarak modelimizi eğitebiliriz. Modelimizi ürettiğimiz *training set*'ten X ve y değerleriyle çağırıyoruz ve eğitimin 50 *epoch* sürmesini istediğimizi belirtiyor. Training setteki her değerin üzerinden bir kere geçilmesine 1 *epoch* adı veriliyor.\n\n```python\nmodel.fit(X, y, epochs=50)\n```\n\n<pre>\n...\nEpoch 42/50\n600/600 [==============================] - 0s - loss: 0.0645     \nEpoch 43/50\n600/600 [==============================] - 0s - loss: 0.0630     \nEpoch 44/50\n600/600 [==============================] - 0s - loss: 0.0619     \nEpoch 45/50\n600/600 [==============================] - 0s - loss: 0.0608     \nEpoch 46/50\n600/600 [==============================] - 0s - loss: 0.0596     \nEpoch 47/50\n600/600 [==============================] - 0s - loss: 0.0584     \nEpoch 48/50\n600/600 [==============================] - 0s - loss: 0.0569     \nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0561     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0548  \n</pre>\n\n*Loss* değerinin gitgide azaldığını görebiliyoruz. Demek ki modelimiz öğreniyor. Ne öğrendiğini görselleştirmeye çalışalım.\n\nÖncelikle sıralı ve gürültüsüz bir test kümesi oluşturalım.\n\n```python\nX_test = []\ny_test = []\nfor i in range(-1800,1800):\n    angle = math.radians(i/10)\n    X_test.append(angle)\n    y_test.append(math.sin(angle))\n```\n\nŞimdi de ağımız çıktısı ve beklenilen çıktıyı bir grafik halinde çizelim\n\n```python\ndef testmodel(X,y):\n    res = model.predict(X, batch_size=32)\n\n    plt.plot(X,y, label='sin')\n    plt.plot(X,res, label='sonuc')\n    plt.xlabel('x (Radyan)')\n    plt.ylabel('sin(x)')\n    plt.legend()\n    plt.show()\n\ntestmodel(X_test,y_test)\n```\n\n![](2.png)\n\nGörüldüğü gibi modelimiz birşeyler öğrenmeye başlamış. Biraz daha eğitime devam edelim. Yeniden model.compile'ı çağırmadığımız sürece eğitime kaldığımız yerden devam edebiliriz.\n\n```python\nmodel.fit(X, y, epochs=50, verbose=0)\ntestmodel(X_test,y_test)\n```\n\n<pre>\n...\nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0271     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0268\n</pre>\n\n![](3.png)\n\nGitgide sinus fonksiyonunu yaklaşıyoruz. bu kez bir 500 *epoch* daha dönelim ve sonucu görelim.\n\n```python\nmodel.fit(X, y, epochs=500, verbose=0)\ntestmodel(X_test,y_test)\n```\n\n![](4.png)\n\nHiç fena değil lan bence.\n\n## Ödevler\n\n- *Training set*'teki gürültü miktarını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?\n- Ağ'ın ilk katmanındaki nöron sayısını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?\n- Bu basit ağ modelini farklı tek giriş, tek çıkışa sahip fonksiyonlarla veya verilerle eğitmeyi deneyin.\n","source":"_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer.md","raw":"---\ntitle: '101 - İlk yapay sinir ağımız, Dense layer'\ndate: 2017-08-04 21:49:42\ntags:\n---\n##### Bu yazıdaki tüm kodları jupyter notebook formatında, [Suni Dimağ github repository](https://github.com/azmesai/suni-dimag)'sinden çekebilirsiniz.\n\nBu örnekte ilk yapay sinir ağımızı gürültülü veri ile sinüs fonksiyonunu taklit etmek üzere eğiteceğiz.\n\n```python\n%matplotlib inline\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nimport random\nimport matplotlib.pyplot as plt\nimport math\n```\n\n## Training set (Öğrenme kümesi)'nin oluşturulması\n\nİlk olarak ağımızı eğitmek için kullanacağımız training set'i oluşturuyoruz. Ağın sinüs fonksiyonunu öğrenmesini istiyoruz, bu yüzden X radyan olarak rastgele açı değerleri, y ilgili açının sinüsü olacak şekilde 600 tane örnek oluşturuyoruz.\n\nGerçek dünyada gürültü içermeyen çok az veri vardır. Yapay sinir ağlarının gürültülü veriyle bile genelleme yapabilme gücünü  gösterebilmek için y değerlerini rastgele bir miktar kaydırıyorum. Gürültünün miktarıyla noiserate değişkenini değiştirerek oynayabilirsiniz.\n\n{% codeblock lang:python %}\nnoiserate = 0.2\nX = []\ny = []\nfor i in range(0,600):\n    angle=random.uniform(-math.pi,math.pi)\n    X.append(angle)\n    y.append(math.sin(angle)+random.uniform(-noiserate,noiserate))\n\nplt.scatter(X,y,s=0.1)\nplt.xlabel('x (Radyan)')\nplt.ylabel('sin(x)')\nplt.legend()\nplt.show()\n{% endcodeblock %}\n\n![](1.png#white)\n\n## Modelin oluşturulması\n\nModelimiz iki katmandan oluşuyor. İlk katmanda 80 adet nöron var ve bunların her birinin girişi verimizin girdisine *(X)*, yani açı değişkenine bağlı. Ayrıca bu katmandaki nöronların herbirinin çıkışı *RELU* adı verilen bir aktivasyon fonksiyonundan geçiyor ama şimdilik bunu umursayın. Bu konuya daha sonra değineceğim. İkinci katmanda ise tek bir nöron var. İlk katmandaki tüm nöronların çıkışları, bu tek nörona bağlanıyor. Bu tek nöronun çıkışı da bizim sinüs değerimizi *(y)* verecek.\n\nModelimizi eğitebilmek için bir *loss* fonksiyonu seçmemiz gerekli. Loss fonksiyonu çıkışımın, istediğimiz değere ne kadar uzak olduğunu gösteren bir fonksiyon. Aslında öğrenme işleminin yaptığı şey bu değeri minimize etmeye çalışmak. Ben burada *Mean Square Error* (Karesel ortalama hata) fonksiyonunu seçtim.\n\nDiğer ihtiyacımız olan şey ise bir *optimizer*, yani *loss*'un nöronların birbirleriyla bağlantı ağırlıklarını güncellemek için nasıl dağıtılacağını belirleyen algoritmamız. Bunun için de en basit *optimizer* algoritmalarından biri olan *Stochastic Gradient Descent* algoritmasını seçtim.\n\n```python\nmodel = Sequential()\nmodel.add(Dense(80, input_shape=(1,), activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='sgd')\n```\n\n## Eğitim şart\n\nArtık `model.fit()` fonksiyonunu çağırarak modelimizi eğitebiliriz. Modelimizi ürettiğimiz *training set*'ten X ve y değerleriyle çağırıyoruz ve eğitimin 50 *epoch* sürmesini istediğimizi belirtiyor. Training setteki her değerin üzerinden bir kere geçilmesine 1 *epoch* adı veriliyor.\n\n```python\nmodel.fit(X, y, epochs=50)\n```\n\n<pre>\n...\nEpoch 42/50\n600/600 [==============================] - 0s - loss: 0.0645     \nEpoch 43/50\n600/600 [==============================] - 0s - loss: 0.0630     \nEpoch 44/50\n600/600 [==============================] - 0s - loss: 0.0619     \nEpoch 45/50\n600/600 [==============================] - 0s - loss: 0.0608     \nEpoch 46/50\n600/600 [==============================] - 0s - loss: 0.0596     \nEpoch 47/50\n600/600 [==============================] - 0s - loss: 0.0584     \nEpoch 48/50\n600/600 [==============================] - 0s - loss: 0.0569     \nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0561     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0548  \n</pre>\n\n*Loss* değerinin gitgide azaldığını görebiliyoruz. Demek ki modelimiz öğreniyor. Ne öğrendiğini görselleştirmeye çalışalım.\n\nÖncelikle sıralı ve gürültüsüz bir test kümesi oluşturalım.\n\n```python\nX_test = []\ny_test = []\nfor i in range(-1800,1800):\n    angle = math.radians(i/10)\n    X_test.append(angle)\n    y_test.append(math.sin(angle))\n```\n\nŞimdi de ağımız çıktısı ve beklenilen çıktıyı bir grafik halinde çizelim\n\n```python\ndef testmodel(X,y):\n    res = model.predict(X, batch_size=32)\n\n    plt.plot(X,y, label='sin')\n    plt.plot(X,res, label='sonuc')\n    plt.xlabel('x (Radyan)')\n    plt.ylabel('sin(x)')\n    plt.legend()\n    plt.show()\n\ntestmodel(X_test,y_test)\n```\n\n![](2.png)\n\nGörüldüğü gibi modelimiz birşeyler öğrenmeye başlamış. Biraz daha eğitime devam edelim. Yeniden model.compile'ı çağırmadığımız sürece eğitime kaldığımız yerden devam edebiliriz.\n\n```python\nmodel.fit(X, y, epochs=50, verbose=0)\ntestmodel(X_test,y_test)\n```\n\n<pre>\n...\nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0271     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0268\n</pre>\n\n![](3.png)\n\nGitgide sinus fonksiyonunu yaklaşıyoruz. bu kez bir 500 *epoch* daha dönelim ve sonucu görelim.\n\n```python\nmodel.fit(X, y, epochs=500, verbose=0)\ntestmodel(X_test,y_test)\n```\n\n![](4.png)\n\nHiç fena değil lan bence.\n\n## Ödevler\n\n- *Training set*'teki gürültü miktarını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?\n- Ağ'ın ilk katmanındaki nöron sayısını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?\n- Bu basit ağ modelini farklı tek giriş, tek çıkışa sahip fonksiyonlarla veya verilerle eğitmeyi deneyin.\n","slug":"101-Ilk-yapay-sinir-agimiz-Dense-layer","published":1,"updated":"2017-08-07T17:30:02.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj62k19pc0000e4gcqwerrmhf","content":"<h5 id=\"Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\"><a href=\"#Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\" class=\"headerlink\" title=\"Bu yazıdaki tüm kodları jupyter notebook formatında, Suni Dimağ github repository‘sinden çekebilirsiniz.\"></a>Bu yazıdaki tüm kodları jupyter notebook formatında, <a href=\"https://github.com/azmesai/suni-dimag\" target=\"_blank\" rel=\"external\">Suni Dimağ github repository</a>‘sinden çekebilirsiniz.</h5><p>Bu örnekte ilk yapay sinir ağımızı gürültülü veri ile sinüs fonksiyonunu taklit etmek üzere eğiteceğiz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</div><div class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> math</div></pre></td></tr></table></figure>\n<h2 id=\"Training-set-Ogrenme-kumesi-’nin-olusturulmasi\"><a href=\"#Training-set-Ogrenme-kumesi-’nin-olusturulmasi\" class=\"headerlink\" title=\"Training set (Öğrenme kümesi)’nin oluşturulması\"></a>Training set (Öğrenme kümesi)’nin oluşturulması</h2><p>İlk olarak ağımızı eğitmek için kullanacağımız training set’i oluşturuyoruz. Ağın sinüs fonksiyonunu öğrenmesini istiyoruz, bu yüzden X radyan olarak rastgele açı değerleri, y ilgili açının sinüsü olacak şekilde 600 tane örnek oluşturuyoruz.</p>\n<p>Gerçek dünyada gürültü içermeyen çok az veri vardır. Yapay sinir ağlarının gürültülü veriyle bile genelleme yapabilme gücünü  gösterebilmek için y değerlerini rastgele bir miktar kaydırıyorum. Gürültünün miktarıyla noiserate değişkenini değiştirerek oynayabilirsiniz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">noiserate = <span class=\"number\">0.2</span></div><div class=\"line\">X = []</div><div class=\"line\">y = []</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">600</span>):</div><div class=\"line\">    angle=random.uniform(-math.pi,math.pi)</div><div class=\"line\">    X.append(angle)</div><div class=\"line\">    y.append(math.sin(angle)+random.uniform(-noiserate,noiserate))</div><div class=\"line\"></div><div class=\"line\">plt.scatter(X,y,s=<span class=\"number\">0.1</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"1.png#white\" alt=\"\"></p>\n<h2 id=\"Modelin-olusturulmasi\"><a href=\"#Modelin-olusturulmasi\" class=\"headerlink\" title=\"Modelin oluşturulması\"></a>Modelin oluşturulması</h2><p>Modelimiz iki katmandan oluşuyor. İlk katmanda 80 adet nöron var ve bunların her birinin girişi verimizin girdisine <em>(X)</em>, yani açı değişkenine bağlı. Ayrıca bu katmandaki nöronların herbirinin çıkışı <em>RELU</em> adı verilen bir aktivasyon fonksiyonundan geçiyor ama şimdilik bunu umursayın. Bu konuya daha sonra değineceğim. İkinci katmanda ise tek bir nöron var. İlk katmandaki tüm nöronların çıkışları, bu tek nörona bağlanıyor. Bu tek nöronun çıkışı da bizim sinüs değerimizi <em>(y)</em> verecek.</p>\n<p>Modelimizi eğitebilmek için bir <em>loss</em> fonksiyonu seçmemiz gerekli. Loss fonksiyonu çıkışımın, istediğimiz değere ne kadar uzak olduğunu gösteren bir fonksiyon. Aslında öğrenme işleminin yaptığı şey bu değeri minimize etmeye çalışmak. Ben burada <em>Mean Square Error</em> (Karesel ortalama hata) fonksiyonunu seçtim.</p>\n<p>Diğer ihtiyacımız olan şey ise bir <em>optimizer</em>, yani <em>loss</em>‘un nöronların birbirleriyla bağlantı ağırlıklarını güncellemek için nasıl dağıtılacağını belirleyen algoritmamız. Bunun için de en basit <em>optimizer</em> algoritmalarından biri olan <em>Stochastic Gradient Descent</em> algoritmasını seçtim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">model = Sequential()</div><div class=\"line\">model.add(Dense(<span class=\"number\">80</span>, input_shape=(<span class=\"number\">1</span>,), activation=<span class=\"string\">'relu'</span>))</div><div class=\"line\">model.add(Dense(<span class=\"number\">1</span>))</div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Egitim-sart\"><a href=\"#Egitim-sart\" class=\"headerlink\" title=\"Eğitim şart\"></a>Eğitim şart</h2><p>Artık <code>model.fit()</code> fonksiyonunu çağırarak modelimizi eğitebiliriz. Modelimizi ürettiğimiz <em>training set</em>‘ten X ve y değerleriyle çağırıyoruz ve eğitimin 50 <em>epoch</em> sürmesini istediğimizi belirtiyor. Training setteki her değerin üzerinden bir kere geçilmesine 1 <em>epoch</em> adı veriliyor.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">50</span>)</div></pre></td></tr></table></figure>\n<pre>\n...\nEpoch 42/50\n600/600 [==============================] - 0s - loss: 0.0645     \nEpoch 43/50\n600/600 [==============================] - 0s - loss: 0.0630     \nEpoch 44/50\n600/600 [==============================] - 0s - loss: 0.0619     \nEpoch 45/50\n600/600 [==============================] - 0s - loss: 0.0608     \nEpoch 46/50\n600/600 [==============================] - 0s - loss: 0.0596     \nEpoch 47/50\n600/600 [==============================] - 0s - loss: 0.0584     \nEpoch 48/50\n600/600 [==============================] - 0s - loss: 0.0569     \nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0561     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0548  \n</pre>\n\n<p><em>Loss</em> değerinin gitgide azaldığını görebiliyoruz. Demek ki modelimiz öğreniyor. Ne öğrendiğini görselleştirmeye çalışalım.</p>\n<p>Öncelikle sıralı ve gürültüsüz bir test kümesi oluşturalım.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">X_test = []</div><div class=\"line\">y_test = []</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">-1800</span>,<span class=\"number\">1800</span>):</div><div class=\"line\">    angle = math.radians(i/<span class=\"number\">10</span>)</div><div class=\"line\">    X_test.append(angle)</div><div class=\"line\">    y_test.append(math.sin(angle))</div></pre></td></tr></table></figure>\n<p>Şimdi de ağımız çıktısı ve beklenilen çıktıyı bir grafik halinde çizelim</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testmodel</span><span class=\"params\">(X,y)</span>:</span></div><div class=\"line\">    res = model.predict(X, batch_size=<span class=\"number\">32</span>)</div><div class=\"line\"></div><div class=\"line\">    plt.plot(X,y, label=<span class=\"string\">'sin'</span>)</div><div class=\"line\">    plt.plot(X,res, label=<span class=\"string\">'sonuc'</span>)</div><div class=\"line\">    plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">    plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">    plt.legend()</div><div class=\"line\">    plt.show()</div><div class=\"line\"></div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>Görüldüğü gibi modelimiz birşeyler öğrenmeye başlamış. Biraz daha eğitime devam edelim. Yeniden model.compile’ı çağırmadığımız sürece eğitime kaldığımız yerden devam edebiliriz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">50</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<pre>\n...\nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0271     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0268\n</pre>\n\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>Gitgide sinus fonksiyonunu yaklaşıyoruz. bu kez bir 500 <em>epoch</em> daha dönelim ve sonucu görelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">500</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>Hiç fena değil lan bence.</p>\n<h2 id=\"Odevler\"><a href=\"#Odevler\" class=\"headerlink\" title=\"Ödevler\"></a>Ödevler</h2><ul>\n<li><em>Training set</em>‘teki gürültü miktarını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?</li>\n<li>Ağ’ın ilk katmanındaki nöron sayısını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?</li>\n<li>Bu basit ağ modelini farklı tek giriş, tek çıkışa sahip fonksiyonlarla veya verilerle eğitmeyi deneyin.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\"><a href=\"#Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\" class=\"headerlink\" title=\"Bu yazıdaki tüm kodları jupyter notebook formatında, Suni Dimağ github repository‘sinden çekebilirsiniz.\"></a>Bu yazıdaki tüm kodları jupyter notebook formatında, <a href=\"https://github.com/azmesai/suni-dimag\" target=\"_blank\" rel=\"external\">Suni Dimağ github repository</a>‘sinden çekebilirsiniz.</h5><p>Bu örnekte ilk yapay sinir ağımızı gürültülü veri ile sinüs fonksiyonunu taklit etmek üzere eğiteceğiz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</div><div class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> math</div></pre></td></tr></table></figure>\n<h2 id=\"Training-set-Ogrenme-kumesi-’nin-olusturulmasi\"><a href=\"#Training-set-Ogrenme-kumesi-’nin-olusturulmasi\" class=\"headerlink\" title=\"Training set (Öğrenme kümesi)’nin oluşturulması\"></a>Training set (Öğrenme kümesi)’nin oluşturulması</h2><p>İlk olarak ağımızı eğitmek için kullanacağımız training set’i oluşturuyoruz. Ağın sinüs fonksiyonunu öğrenmesini istiyoruz, bu yüzden X radyan olarak rastgele açı değerleri, y ilgili açının sinüsü olacak şekilde 600 tane örnek oluşturuyoruz.</p>\n<p>Gerçek dünyada gürültü içermeyen çok az veri vardır. Yapay sinir ağlarının gürültülü veriyle bile genelleme yapabilme gücünü  gösterebilmek için y değerlerini rastgele bir miktar kaydırıyorum. Gürültünün miktarıyla noiserate değişkenini değiştirerek oynayabilirsiniz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">noiserate = <span class=\"number\">0.2</span></div><div class=\"line\">X = []</div><div class=\"line\">y = []</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">600</span>):</div><div class=\"line\">    angle=random.uniform(-math.pi,math.pi)</div><div class=\"line\">    X.append(angle)</div><div class=\"line\">    y.append(math.sin(angle)+random.uniform(-noiserate,noiserate))</div><div class=\"line\"></div><div class=\"line\">plt.scatter(X,y,s=<span class=\"number\">0.1</span>)</div><div class=\"line\">plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">plt.legend()</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"1.png#white\" alt=\"\"></p>\n<h2 id=\"Modelin-olusturulmasi\"><a href=\"#Modelin-olusturulmasi\" class=\"headerlink\" title=\"Modelin oluşturulması\"></a>Modelin oluşturulması</h2><p>Modelimiz iki katmandan oluşuyor. İlk katmanda 80 adet nöron var ve bunların her birinin girişi verimizin girdisine <em>(X)</em>, yani açı değişkenine bağlı. Ayrıca bu katmandaki nöronların herbirinin çıkışı <em>RELU</em> adı verilen bir aktivasyon fonksiyonundan geçiyor ama şimdilik bunu umursayın. Bu konuya daha sonra değineceğim. İkinci katmanda ise tek bir nöron var. İlk katmandaki tüm nöronların çıkışları, bu tek nörona bağlanıyor. Bu tek nöronun çıkışı da bizim sinüs değerimizi <em>(y)</em> verecek.</p>\n<p>Modelimizi eğitebilmek için bir <em>loss</em> fonksiyonu seçmemiz gerekli. Loss fonksiyonu çıkışımın, istediğimiz değere ne kadar uzak olduğunu gösteren bir fonksiyon. Aslında öğrenme işleminin yaptığı şey bu değeri minimize etmeye çalışmak. Ben burada <em>Mean Square Error</em> (Karesel ortalama hata) fonksiyonunu seçtim.</p>\n<p>Diğer ihtiyacımız olan şey ise bir <em>optimizer</em>, yani <em>loss</em>‘un nöronların birbirleriyla bağlantı ağırlıklarını güncellemek için nasıl dağıtılacağını belirleyen algoritmamız. Bunun için de en basit <em>optimizer</em> algoritmalarından biri olan <em>Stochastic Gradient Descent</em> algoritmasını seçtim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">model = Sequential()</div><div class=\"line\">model.add(Dense(<span class=\"number\">80</span>, input_shape=(<span class=\"number\">1</span>,), activation=<span class=\"string\">'relu'</span>))</div><div class=\"line\">model.add(Dense(<span class=\"number\">1</span>))</div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Egitim-sart\"><a href=\"#Egitim-sart\" class=\"headerlink\" title=\"Eğitim şart\"></a>Eğitim şart</h2><p>Artık <code>model.fit()</code> fonksiyonunu çağırarak modelimizi eğitebiliriz. Modelimizi ürettiğimiz <em>training set</em>‘ten X ve y değerleriyle çağırıyoruz ve eğitimin 50 <em>epoch</em> sürmesini istediğimizi belirtiyor. Training setteki her değerin üzerinden bir kere geçilmesine 1 <em>epoch</em> adı veriliyor.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">50</span>)</div></pre></td></tr></table></figure>\n<pre>\n...\nEpoch 42/50\n600/600 [==============================] - 0s - loss: 0.0645     \nEpoch 43/50\n600/600 [==============================] - 0s - loss: 0.0630     \nEpoch 44/50\n600/600 [==============================] - 0s - loss: 0.0619     \nEpoch 45/50\n600/600 [==============================] - 0s - loss: 0.0608     \nEpoch 46/50\n600/600 [==============================] - 0s - loss: 0.0596     \nEpoch 47/50\n600/600 [==============================] - 0s - loss: 0.0584     \nEpoch 48/50\n600/600 [==============================] - 0s - loss: 0.0569     \nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0561     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0548  \n</pre>\n\n<p><em>Loss</em> değerinin gitgide azaldığını görebiliyoruz. Demek ki modelimiz öğreniyor. Ne öğrendiğini görselleştirmeye çalışalım.</p>\n<p>Öncelikle sıralı ve gürültüsüz bir test kümesi oluşturalım.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">X_test = []</div><div class=\"line\">y_test = []</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">-1800</span>,<span class=\"number\">1800</span>):</div><div class=\"line\">    angle = math.radians(i/<span class=\"number\">10</span>)</div><div class=\"line\">    X_test.append(angle)</div><div class=\"line\">    y_test.append(math.sin(angle))</div></pre></td></tr></table></figure>\n<p>Şimdi de ağımız çıktısı ve beklenilen çıktıyı bir grafik halinde çizelim</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testmodel</span><span class=\"params\">(X,y)</span>:</span></div><div class=\"line\">    res = model.predict(X, batch_size=<span class=\"number\">32</span>)</div><div class=\"line\"></div><div class=\"line\">    plt.plot(X,y, label=<span class=\"string\">'sin'</span>)</div><div class=\"line\">    plt.plot(X,res, label=<span class=\"string\">'sonuc'</span>)</div><div class=\"line\">    plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">    plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">    plt.legend()</div><div class=\"line\">    plt.show()</div><div class=\"line\"></div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>Görüldüğü gibi modelimiz birşeyler öğrenmeye başlamış. Biraz daha eğitime devam edelim. Yeniden model.compile’ı çağırmadığımız sürece eğitime kaldığımız yerden devam edebiliriz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">50</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<pre>\n...\nEpoch 49/50\n600/600 [==============================] - 0s - loss: 0.0271     \nEpoch 50/50\n600/600 [==============================] - 0s - loss: 0.0268\n</pre>\n\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>Gitgide sinus fonksiyonunu yaklaşıyoruz. bu kez bir 500 <em>epoch</em> daha dönelim ve sonucu görelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">500</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testmodel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>Hiç fena değil lan bence.</p>\n<h2 id=\"Odevler\"><a href=\"#Odevler\" class=\"headerlink\" title=\"Ödevler\"></a>Ödevler</h2><ul>\n<li><em>Training set</em>‘teki gürültü miktarını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?</li>\n<li>Ağ’ın ilk katmanındaki nöron sayısını arttırmak veya azaltmak ağın performansını nasıl değiştiriyor?</li>\n<li>Bu basit ağ modelini farklı tek giriş, tek çıkışa sahip fonksiyonlarla veya verilerle eğitmeyi deneyin.</li>\n</ul>\n"},{"title":"102 - Veri mühendisliği - y'de bias ve scale","date":"2017-08-07T17:48:03.000Z","_content":"##### Bu yazıdaki tüm kodları jupyter notebook formatında, [Suni Dimağ github repository](https://github.com/azmesai/suni-dimag)'sinden çekebilirsiniz.\n\n[101](https://github.com/azmesai/suni-dimag/blob/master/101/101.ipynb) dersinde kurduğumuz ağ üzerinden, verimizdeki hedef değerlerin (y) bazı özelliklerinin ağımızın performansını nasıl etkilediğini inceleyeceğiz.\n\n```python\n%matplotlib inline\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nimport random\nimport matplotlib.pyplot as plt\nimport math\nimport numpy as np\n\nnp.random.seed(1337)\n```\n\n## Training ve test kümelerinin oluşturulması\n\nÖnceki derste yazdığımız training ve test kümelerini üreten fonksiyonları biraz daha genelleştirdik. Bu kez parametre olarak bir fonksiyon alıyorlar ve y değerlerini, ürettikleri X değerlerini bu fonksiyondan geçirerek oluşturuyorlar.\n\nYeni yazdığımız sine_function fonksiyonu ise bize üç ayrı ayarlanabilir parametresi olan bir sinüs fonksiyonu döndürüyor. Training ve test kümesi üreten fonksiyonlara parametre olaran buradan aldığımız fonksiyonu geçeceğiz.\n\ntestModel fonksiyonu ise yine geçen derste kullandığımız grafik fonksiyonunun aynısı.\n\n```python\ndef sine_function(noiserate=0, bias=0, scale=1):\n    def _sine_function(angle):\n        return ( math.sin( angle ) +\n               random.uniform(-noiserate, noiserate) ) * scale + bias\n    return _sine_function\n\ndef trainingData(func):\n    noiserate = 0.2\n    X = []\n    y = []\n    for i in range(0,600):\n        angle=random.uniform(-math.pi,math.pi)\n        X.append(angle)\n        y.append(func(angle))\n    return X,y\n\ndef testData(func):\n    X = []\n    y = []\n    for i in range(-1800,1800):\n        angle = math.radians(i/10)\n        X.append(angle)\n        y.append(func(angle))\n    return X,y\n\ndef testModel(X,y):\n    res = model.predict(X, batch_size=32)\n\n    plt.plot(X,y, label='sin')\n    plt.plot(X,res, label='sonuc')\n    plt.xlabel('x (Radyan)')\n    plt.ylabel('sin(x)')\n    plt.legend()\n    plt.show()\n```\n## Modelin oluşturulması\n\nYine bir önceki derste kullandığımız modelin aynısını kullanacağız.\n\nModelimizi oluşturduktan sonra tüm bağlantı ağırlıklarını bir değişkende saklıyoruz ki her deneye aynı noktadan başlayabilelim.\n\n```python\nmodel = Sequential()\nmodel.add(Dense(80, input_shape=(1,), activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='sgd')\n\nweights = model.get_weights()\n```\n\n## Deney 0 - Referans\n\nİlk olarak *noiserate* = 0, *bias* = 0 ve *scale* = 1 ile ağımızı 450 *epoch* eğittizde nasıl bir sonuç aldığımıza bakalım. Bu bizim referansımız olacak. Yapacağımız değişikliklerde performansı bu referanslar karşılastıracağız.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=0,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.fit(X, y, epochs=350,verbose=0)\ntestModel(X_test,y_test)\n```\n![](1.png)\n\nBakalım *bias* neyi değiştiriyor.\n\n## Deney 1 - Pozitif Bias\n\nFonskiyonumuzun *bias* ayarı, fonksiyonun çıktısını olduğu gibi yukarı veya aşağı itelemeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu 39 ile 41 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=40,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=350, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](2.png)\n\nAğımızın performansı gözle görülür ölçüde düştü. Konuyu iyice abartırsak ne olur dersiniz?\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=400,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=3)\n```\n\n<pre>\nEpoch 1/3\n600/600 [==============================] - 0s - loss: nan             \nEpoch 2/3\n600/600 [==============================] - 0s - loss: nan     \nEpoch 3/3\n600/600 [==============================] - 0s - loss: nan     \n</pre>\n\n*Loss* taşma yapacak derece büyüdü ve modelin hesaplayamayacağı hale geldi.\n\n## Deney 2 - Küçük scale\n\nFonskiyonumuzun *scale* ayarı, fonksiyonun çıktısını y ekseninde daraltıp genişletmeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu -0.1 ile 0.1 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=0,scale=0.3)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=350, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](3.png)\n\nAğımızın performansı yine düştü. Fakat bu seferki çıktı önceki derste ağımız fonksiyonu tam olarak öğrenemeden arada çizdiğimiz grafiklere benziyor. Eğitimi biraz daha sürdürelim.\n\n```python\nmodel.fit(X, y, epochs=600, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](4.png)\n\nEvet gerçekten de öğrenmeyi başardı, ama eğitim neredeyse 3 kat uzun sürdü ve hala performansımız referans kadar iyi değil.\n\nUuuu beybi.\n\n## Özet\n\n- Ağımıza öğretmeye çalıştığımız hedef değerlerin *bias* ve *scale*'i veya istatistik diliyle ortalama ve varyans'ı önemli. Seçilen aktivasyon fonksiyolanlarına göre kullanılabilecek aralıklar değişse bile, ortalamanın 0, varyansın ise 1 olduğu durum genellikle tercih edilir.\n- Yüksek *bias*, veya ortalamanın yüksek olması nöronların hassasiyetlerini yitirmesi ve aşırı durumlarda ağırlık veya *loss* değerinin taşma yapmasına sebep olabilir.\n- Küçük scale veya varyansın düşük olması durumunda nöronlar hem hassasiyetlerini kaybeder, hem de eğitim çok daha uzun sürer.\n\n## Ödevler\n\n- Negatif *bias* durumunda ağın performansı nasıl etkileniyor?\n- *Scale*'in gereğinden büyük olması durumunda ağın performansı nasıl etkileniyor?\n- Aynı deneyleri gürültü miktarını 0.2 olarak ayarlayıp tekrarlayın. Bu durumda ne değişiyor?\n","source":"_posts/102-Veri-muhendisligi-y-de-bias-ve-scale.md","raw":"---\ntitle: 102 - Veri mühendisliği - y'de bias ve scale\ndate: 2017-08-07 20:48:03\ntags:\n---\n##### Bu yazıdaki tüm kodları jupyter notebook formatında, [Suni Dimağ github repository](https://github.com/azmesai/suni-dimag)'sinden çekebilirsiniz.\n\n[101](https://github.com/azmesai/suni-dimag/blob/master/101/101.ipynb) dersinde kurduğumuz ağ üzerinden, verimizdeki hedef değerlerin (y) bazı özelliklerinin ağımızın performansını nasıl etkilediğini inceleyeceğiz.\n\n```python\n%matplotlib inline\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nimport random\nimport matplotlib.pyplot as plt\nimport math\nimport numpy as np\n\nnp.random.seed(1337)\n```\n\n## Training ve test kümelerinin oluşturulması\n\nÖnceki derste yazdığımız training ve test kümelerini üreten fonksiyonları biraz daha genelleştirdik. Bu kez parametre olarak bir fonksiyon alıyorlar ve y değerlerini, ürettikleri X değerlerini bu fonksiyondan geçirerek oluşturuyorlar.\n\nYeni yazdığımız sine_function fonksiyonu ise bize üç ayrı ayarlanabilir parametresi olan bir sinüs fonksiyonu döndürüyor. Training ve test kümesi üreten fonksiyonlara parametre olaran buradan aldığımız fonksiyonu geçeceğiz.\n\ntestModel fonksiyonu ise yine geçen derste kullandığımız grafik fonksiyonunun aynısı.\n\n```python\ndef sine_function(noiserate=0, bias=0, scale=1):\n    def _sine_function(angle):\n        return ( math.sin( angle ) +\n               random.uniform(-noiserate, noiserate) ) * scale + bias\n    return _sine_function\n\ndef trainingData(func):\n    noiserate = 0.2\n    X = []\n    y = []\n    for i in range(0,600):\n        angle=random.uniform(-math.pi,math.pi)\n        X.append(angle)\n        y.append(func(angle))\n    return X,y\n\ndef testData(func):\n    X = []\n    y = []\n    for i in range(-1800,1800):\n        angle = math.radians(i/10)\n        X.append(angle)\n        y.append(func(angle))\n    return X,y\n\ndef testModel(X,y):\n    res = model.predict(X, batch_size=32)\n\n    plt.plot(X,y, label='sin')\n    plt.plot(X,res, label='sonuc')\n    plt.xlabel('x (Radyan)')\n    plt.ylabel('sin(x)')\n    plt.legend()\n    plt.show()\n```\n## Modelin oluşturulması\n\nYine bir önceki derste kullandığımız modelin aynısını kullanacağız.\n\nModelimizi oluşturduktan sonra tüm bağlantı ağırlıklarını bir değişkende saklıyoruz ki her deneye aynı noktadan başlayabilelim.\n\n```python\nmodel = Sequential()\nmodel.add(Dense(80, input_shape=(1,), activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='sgd')\n\nweights = model.get_weights()\n```\n\n## Deney 0 - Referans\n\nİlk olarak *noiserate* = 0, *bias* = 0 ve *scale* = 1 ile ağımızı 450 *epoch* eğittizde nasıl bir sonuç aldığımıza bakalım. Bu bizim referansımız olacak. Yapacağımız değişikliklerde performansı bu referanslar karşılastıracağız.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=0,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.fit(X, y, epochs=350,verbose=0)\ntestModel(X_test,y_test)\n```\n![](1.png)\n\nBakalım *bias* neyi değiştiriyor.\n\n## Deney 1 - Pozitif Bias\n\nFonskiyonumuzun *bias* ayarı, fonksiyonun çıktısını olduğu gibi yukarı veya aşağı itelemeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu 39 ile 41 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=40,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=350, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](2.png)\n\nAğımızın performansı gözle görülür ölçüde düştü. Konuyu iyice abartırsak ne olur dersiniz?\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=400,scale=1)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=3)\n```\n\n<pre>\nEpoch 1/3\n600/600 [==============================] - 0s - loss: nan             \nEpoch 2/3\n600/600 [==============================] - 0s - loss: nan     \nEpoch 3/3\n600/600 [==============================] - 0s - loss: nan     \n</pre>\n\n*Loss* taşma yapacak derece büyüdü ve modelin hesaplayamayacağı hale geldi.\n\n## Deney 2 - Küçük scale\n\nFonskiyonumuzun *scale* ayarı, fonksiyonun çıktısını y ekseninde daraltıp genişletmeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu -0.1 ile 0.1 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.\n\n```python\nmodel.set_weights(weights)\nsine = sine_function(noiserate=0,bias=0,scale=0.3)\nX,y = trainingData(sine)\nX_test, y_test = testData(sine)\n\nmodel.compile(loss='mse', optimizer='sgd')\nmodel.fit(X, y, epochs=350, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](3.png)\n\nAğımızın performansı yine düştü. Fakat bu seferki çıktı önceki derste ağımız fonksiyonu tam olarak öğrenemeden arada çizdiğimiz grafiklere benziyor. Eğitimi biraz daha sürdürelim.\n\n```python\nmodel.fit(X, y, epochs=600, verbose=0)\ntestModel(X_test,y_test)\n```\n\n![](4.png)\n\nEvet gerçekten de öğrenmeyi başardı, ama eğitim neredeyse 3 kat uzun sürdü ve hala performansımız referans kadar iyi değil.\n\nUuuu beybi.\n\n## Özet\n\n- Ağımıza öğretmeye çalıştığımız hedef değerlerin *bias* ve *scale*'i veya istatistik diliyle ortalama ve varyans'ı önemli. Seçilen aktivasyon fonksiyolanlarına göre kullanılabilecek aralıklar değişse bile, ortalamanın 0, varyansın ise 1 olduğu durum genellikle tercih edilir.\n- Yüksek *bias*, veya ortalamanın yüksek olması nöronların hassasiyetlerini yitirmesi ve aşırı durumlarda ağırlık veya *loss* değerinin taşma yapmasına sebep olabilir.\n- Küçük scale veya varyansın düşük olması durumunda nöronlar hem hassasiyetlerini kaybeder, hem de eğitim çok daha uzun sürer.\n\n## Ödevler\n\n- Negatif *bias* durumunda ağın performansı nasıl etkileniyor?\n- *Scale*'in gereğinden büyük olması durumunda ağın performansı nasıl etkileniyor?\n- Aynı deneyleri gürültü miktarını 0.2 olarak ayarlayıp tekrarlayın. Bu durumda ne değişiyor?\n","slug":"102-Veri-muhendisligi-y-de-bias-ve-scale","published":1,"updated":"2017-08-07T19:32:27.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj62k19ph0001e4gclrhm9hpx","content":"<h5 id=\"Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\"><a href=\"#Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\" class=\"headerlink\" title=\"Bu yazıdaki tüm kodları jupyter notebook formatında, Suni Dimağ github repository‘sinden çekebilirsiniz.\"></a>Bu yazıdaki tüm kodları jupyter notebook formatında, <a href=\"https://github.com/azmesai/suni-dimag\" target=\"_blank\" rel=\"external\">Suni Dimağ github repository</a>‘sinden çekebilirsiniz.</h5><p><a href=\"https://github.com/azmesai/suni-dimag/blob/master/101/101.ipynb\" target=\"_blank\" rel=\"external\">101</a> dersinde kurduğumuz ağ üzerinden, verimizdeki hedef değerlerin (y) bazı özelliklerinin ağımızın performansını nasıl etkilediğini inceleyeceğiz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</div><div class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">np.random.seed(<span class=\"number\">1337</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Training-ve-test-kumelerinin-olusturulmasi\"><a href=\"#Training-ve-test-kumelerinin-olusturulmasi\" class=\"headerlink\" title=\"Training ve test kümelerinin oluşturulması\"></a>Training ve test kümelerinin oluşturulması</h2><p>Önceki derste yazdığımız training ve test kümelerini üreten fonksiyonları biraz daha genelleştirdik. Bu kez parametre olarak bir fonksiyon alıyorlar ve y değerlerini, ürettikleri X değerlerini bu fonksiyondan geçirerek oluşturuyorlar.</p>\n<p>Yeni yazdığımız sine_function fonksiyonu ise bize üç ayrı ayarlanabilir parametresi olan bir sinüs fonksiyonu döndürüyor. Training ve test kümesi üreten fonksiyonlara parametre olaran buradan aldığımız fonksiyonu geçeceğiz.</p>\n<p>testModel fonksiyonu ise yine geçen derste kullandığımız grafik fonksiyonunun aynısı.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sine_function</span><span class=\"params\">(noiserate=<span class=\"number\">0</span>, bias=<span class=\"number\">0</span>, scale=<span class=\"number\">1</span>)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_sine_function</span><span class=\"params\">(angle)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ( math.sin( angle ) +</div><div class=\"line\">               random.uniform(-noiserate, noiserate) ) * scale + bias</div><div class=\"line\">    <span class=\"keyword\">return</span> _sine_function</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainingData</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    noiserate = <span class=\"number\">0.2</span></div><div class=\"line\">    X = []</div><div class=\"line\">    y = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">600</span>):</div><div class=\"line\">        angle=random.uniform(-math.pi,math.pi)</div><div class=\"line\">        X.append(angle)</div><div class=\"line\">        y.append(func(angle))</div><div class=\"line\">    <span class=\"keyword\">return</span> X,y</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testData</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    X = []</div><div class=\"line\">    y = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">-1800</span>,<span class=\"number\">1800</span>):</div><div class=\"line\">        angle = math.radians(i/<span class=\"number\">10</span>)</div><div class=\"line\">        X.append(angle)</div><div class=\"line\">        y.append(func(angle))</div><div class=\"line\">    <span class=\"keyword\">return</span> X,y</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testModel</span><span class=\"params\">(X,y)</span>:</span></div><div class=\"line\">    res = model.predict(X, batch_size=<span class=\"number\">32</span>)</div><div class=\"line\"></div><div class=\"line\">    plt.plot(X,y, label=<span class=\"string\">'sin'</span>)</div><div class=\"line\">    plt.plot(X,res, label=<span class=\"string\">'sonuc'</span>)</div><div class=\"line\">    plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">    plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">    plt.legend()</div><div class=\"line\">    plt.show()</div></pre></td></tr></table></figure>\n<h2 id=\"Modelin-olusturulmasi\"><a href=\"#Modelin-olusturulmasi\" class=\"headerlink\" title=\"Modelin oluşturulması\"></a>Modelin oluşturulması</h2><p>Yine bir önceki derste kullandığımız modelin aynısını kullanacağız.</p>\n<p>Modelimizi oluşturduktan sonra tüm bağlantı ağırlıklarını bir değişkende saklıyoruz ki her deneye aynı noktadan başlayabilelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">model = Sequential()</div><div class=\"line\">model.add(Dense(<span class=\"number\">80</span>, input_shape=(<span class=\"number\">1</span>,), activation=<span class=\"string\">'relu'</span>))</div><div class=\"line\">model.add(Dense(<span class=\"number\">1</span>))</div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\"></div><div class=\"line\">weights = model.get_weights()</div></pre></td></tr></table></figure>\n<h2 id=\"Deney-0-Referans\"><a href=\"#Deney-0-Referans\" class=\"headerlink\" title=\"Deney 0 - Referans\"></a>Deney 0 - Referans</h2><p>İlk olarak <em>noiserate</em> = 0, <em>bias</em> = 0 ve <em>scale</em> = 1 ile ağımızı 450 <em>epoch</em> eğittizde nasıl bir sonuç aldığımıza bakalım. Bu bizim referansımız olacak. Yapacağımız değişikliklerde performansı bu referanslar karşılastıracağız.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">0</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>,verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>Bakalım <em>bias</em> neyi değiştiriyor.</p>\n<h2 id=\"Deney-1-Pozitif-Bias\"><a href=\"#Deney-1-Pozitif-Bias\" class=\"headerlink\" title=\"Deney 1 - Pozitif Bias\"></a>Deney 1 - Pozitif Bias</h2><p>Fonskiyonumuzun <em>bias</em> ayarı, fonksiyonun çıktısını olduğu gibi yukarı veya aşağı itelemeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu 39 ile 41 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">40</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>Ağımızın performansı gözle görülür ölçüde düştü. Konuyu iyice abartırsak ne olur dersiniz?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">400</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<pre>\nEpoch 1/3\n600/600 [==============================] - 0s - loss: nan             \nEpoch 2/3\n600/600 [==============================] - 0s - loss: nan     \nEpoch 3/3\n600/600 [==============================] - 0s - loss: nan     \n</pre>\n\n<p><em>Loss</em> taşma yapacak derece büyüdü ve modelin hesaplayamayacağı hale geldi.</p>\n<h2 id=\"Deney-2-Kucuk-scale\"><a href=\"#Deney-2-Kucuk-scale\" class=\"headerlink\" title=\"Deney 2 - Küçük scale\"></a>Deney 2 - Küçük scale</h2><p>Fonskiyonumuzun <em>scale</em> ayarı, fonksiyonun çıktısını y ekseninde daraltıp genişletmeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu -0.1 ile 0.1 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">0</span>,scale=<span class=\"number\">0.3</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>Ağımızın performansı yine düştü. Fakat bu seferki çıktı önceki derste ağımız fonksiyonu tam olarak öğrenemeden arada çizdiğimiz grafiklere benziyor. Eğitimi biraz daha sürdürelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">600</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>Evet gerçekten de öğrenmeyi başardı, ama eğitim neredeyse 3 kat uzun sürdü ve hala performansımız referans kadar iyi değil.</p>\n<p>Uuuu beybi.</p>\n<h2 id=\"Ozet\"><a href=\"#Ozet\" class=\"headerlink\" title=\"Özet\"></a>Özet</h2><ul>\n<li>Ağımıza öğretmeye çalıştığımız hedef değerlerin <em>bias</em> ve <em>scale</em>‘i veya istatistik diliyle ortalama ve varyans’ı önemli. Seçilen aktivasyon fonksiyolanlarına göre kullanılabilecek aralıklar değişse bile, ortalamanın 0, varyansın ise 1 olduğu durum genellikle tercih edilir.</li>\n<li>Yüksek <em>bias</em>, veya ortalamanın yüksek olması nöronların hassasiyetlerini yitirmesi ve aşırı durumlarda ağırlık veya <em>loss</em> değerinin taşma yapmasına sebep olabilir.</li>\n<li>Küçük scale veya varyansın düşük olması durumunda nöronlar hem hassasiyetlerini kaybeder, hem de eğitim çok daha uzun sürer.</li>\n</ul>\n<h2 id=\"Odevler\"><a href=\"#Odevler\" class=\"headerlink\" title=\"Ödevler\"></a>Ödevler</h2><ul>\n<li>Negatif <em>bias</em> durumunda ağın performansı nasıl etkileniyor?</li>\n<li><em>Scale</em>‘in gereğinden büyük olması durumunda ağın performansı nasıl etkileniyor?</li>\n<li>Aynı deneyleri gürültü miktarını 0.2 olarak ayarlayıp tekrarlayın. Bu durumda ne değişiyor?</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\"><a href=\"#Bu-yazidaki-tum-kodlari-jupyter-notebook-formatinda-Suni-Dimag-github-repository‘sinden-cekebilirsiniz\" class=\"headerlink\" title=\"Bu yazıdaki tüm kodları jupyter notebook formatında, Suni Dimağ github repository‘sinden çekebilirsiniz.\"></a>Bu yazıdaki tüm kodları jupyter notebook formatında, <a href=\"https://github.com/azmesai/suni-dimag\" target=\"_blank\" rel=\"external\">Suni Dimağ github repository</a>‘sinden çekebilirsiniz.</h5><p><a href=\"https://github.com/azmesai/suni-dimag/blob/master/101/101.ipynb\" target=\"_blank\" rel=\"external\">101</a> dersinde kurduğumuz ağ üzerinden, verimizdeki hedef değerlerin (y) bazı özelliklerinin ağımızın performansını nasıl etkilediğini inceleyeceğiz.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">%matplotlib inline</div><div class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</div><div class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"></div><div class=\"line\">np.random.seed(<span class=\"number\">1337</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Training-ve-test-kumelerinin-olusturulmasi\"><a href=\"#Training-ve-test-kumelerinin-olusturulmasi\" class=\"headerlink\" title=\"Training ve test kümelerinin oluşturulması\"></a>Training ve test kümelerinin oluşturulması</h2><p>Önceki derste yazdığımız training ve test kümelerini üreten fonksiyonları biraz daha genelleştirdik. Bu kez parametre olarak bir fonksiyon alıyorlar ve y değerlerini, ürettikleri X değerlerini bu fonksiyondan geçirerek oluşturuyorlar.</p>\n<p>Yeni yazdığımız sine_function fonksiyonu ise bize üç ayrı ayarlanabilir parametresi olan bir sinüs fonksiyonu döndürüyor. Training ve test kümesi üreten fonksiyonlara parametre olaran buradan aldığımız fonksiyonu geçeceğiz.</p>\n<p>testModel fonksiyonu ise yine geçen derste kullandığımız grafik fonksiyonunun aynısı.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sine_function</span><span class=\"params\">(noiserate=<span class=\"number\">0</span>, bias=<span class=\"number\">0</span>, scale=<span class=\"number\">1</span>)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_sine_function</span><span class=\"params\">(angle)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ( math.sin( angle ) +</div><div class=\"line\">               random.uniform(-noiserate, noiserate) ) * scale + bias</div><div class=\"line\">    <span class=\"keyword\">return</span> _sine_function</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trainingData</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    noiserate = <span class=\"number\">0.2</span></div><div class=\"line\">    X = []</div><div class=\"line\">    y = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">600</span>):</div><div class=\"line\">        angle=random.uniform(-math.pi,math.pi)</div><div class=\"line\">        X.append(angle)</div><div class=\"line\">        y.append(func(angle))</div><div class=\"line\">    <span class=\"keyword\">return</span> X,y</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testData</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\">    X = []</div><div class=\"line\">    y = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">-1800</span>,<span class=\"number\">1800</span>):</div><div class=\"line\">        angle = math.radians(i/<span class=\"number\">10</span>)</div><div class=\"line\">        X.append(angle)</div><div class=\"line\">        y.append(func(angle))</div><div class=\"line\">    <span class=\"keyword\">return</span> X,y</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testModel</span><span class=\"params\">(X,y)</span>:</span></div><div class=\"line\">    res = model.predict(X, batch_size=<span class=\"number\">32</span>)</div><div class=\"line\"></div><div class=\"line\">    plt.plot(X,y, label=<span class=\"string\">'sin'</span>)</div><div class=\"line\">    plt.plot(X,res, label=<span class=\"string\">'sonuc'</span>)</div><div class=\"line\">    plt.xlabel(<span class=\"string\">'x (Radyan)'</span>)</div><div class=\"line\">    plt.ylabel(<span class=\"string\">'sin(x)'</span>)</div><div class=\"line\">    plt.legend()</div><div class=\"line\">    plt.show()</div></pre></td></tr></table></figure>\n<h2 id=\"Modelin-olusturulmasi\"><a href=\"#Modelin-olusturulmasi\" class=\"headerlink\" title=\"Modelin oluşturulması\"></a>Modelin oluşturulması</h2><p>Yine bir önceki derste kullandığımız modelin aynısını kullanacağız.</p>\n<p>Modelimizi oluşturduktan sonra tüm bağlantı ağırlıklarını bir değişkende saklıyoruz ki her deneye aynı noktadan başlayabilelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">model = Sequential()</div><div class=\"line\">model.add(Dense(<span class=\"number\">80</span>, input_shape=(<span class=\"number\">1</span>,), activation=<span class=\"string\">'relu'</span>))</div><div class=\"line\">model.add(Dense(<span class=\"number\">1</span>))</div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\"></div><div class=\"line\">weights = model.get_weights()</div></pre></td></tr></table></figure>\n<h2 id=\"Deney-0-Referans\"><a href=\"#Deney-0-Referans\" class=\"headerlink\" title=\"Deney 0 - Referans\"></a>Deney 0 - Referans</h2><p>İlk olarak <em>noiserate</em> = 0, <em>bias</em> = 0 ve <em>scale</em> = 1 ile ağımızı 450 <em>epoch</em> eğittizde nasıl bir sonuç aldığımıza bakalım. Bu bizim referansımız olacak. Yapacağımız değişikliklerde performansı bu referanslar karşılastıracağız.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">0</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>,verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>Bakalım <em>bias</em> neyi değiştiriyor.</p>\n<h2 id=\"Deney-1-Pozitif-Bias\"><a href=\"#Deney-1-Pozitif-Bias\" class=\"headerlink\" title=\"Deney 1 - Pozitif Bias\"></a>Deney 1 - Pozitif Bias</h2><p>Fonskiyonumuzun <em>bias</em> ayarı, fonksiyonun çıktısını olduğu gibi yukarı veya aşağı itelemeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu 39 ile 41 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">40</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>Ağımızın performansı gözle görülür ölçüde düştü. Konuyu iyice abartırsak ne olur dersiniz?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">400</span>,scale=<span class=\"number\">1</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<pre>\nEpoch 1/3\n600/600 [==============================] - 0s - loss: nan             \nEpoch 2/3\n600/600 [==============================] - 0s - loss: nan     \nEpoch 3/3\n600/600 [==============================] - 0s - loss: nan     \n</pre>\n\n<p><em>Loss</em> taşma yapacak derece büyüdü ve modelin hesaplayamayacağı hale geldi.</p>\n<h2 id=\"Deney-2-Kucuk-scale\"><a href=\"#Deney-2-Kucuk-scale\" class=\"headerlink\" title=\"Deney 2 - Küçük scale\"></a>Deney 2 - Küçük scale</h2><p>Fonskiyonumuzun <em>scale</em> ayarı, fonksiyonun çıktısını y ekseninde daraltıp genişletmeye yarıyor. Yukarıdaki örnekte sinüs fonksiyonunun -1 ile 1 arası değerler döndüğünü görüyorsunuz. Şimdi aynı fonksiyonu -0.1 ile 0.1 arası değerler dönecek halde tanımlayıp ağımızı yeniden eğitmeyi deneyelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.set_weights(weights)</div><div class=\"line\">sine = sine_function(noiserate=<span class=\"number\">0</span>,bias=<span class=\"number\">0</span>,scale=<span class=\"number\">0.3</span>)</div><div class=\"line\">X,y = trainingData(sine)</div><div class=\"line\">X_test, y_test = testData(sine)</div><div class=\"line\"></div><div class=\"line\">model.compile(loss=<span class=\"string\">'mse'</span>, optimizer=<span class=\"string\">'sgd'</span>)</div><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">350</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>Ağımızın performansı yine düştü. Fakat bu seferki çıktı önceki derste ağımız fonksiyonu tam olarak öğrenemeden arada çizdiğimiz grafiklere benziyor. Eğitimi biraz daha sürdürelim.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.fit(X, y, epochs=<span class=\"number\">600</span>, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">testModel(X_test,y_test)</div></pre></td></tr></table></figure>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>Evet gerçekten de öğrenmeyi başardı, ama eğitim neredeyse 3 kat uzun sürdü ve hala performansımız referans kadar iyi değil.</p>\n<p>Uuuu beybi.</p>\n<h2 id=\"Ozet\"><a href=\"#Ozet\" class=\"headerlink\" title=\"Özet\"></a>Özet</h2><ul>\n<li>Ağımıza öğretmeye çalıştığımız hedef değerlerin <em>bias</em> ve <em>scale</em>‘i veya istatistik diliyle ortalama ve varyans’ı önemli. Seçilen aktivasyon fonksiyolanlarına göre kullanılabilecek aralıklar değişse bile, ortalamanın 0, varyansın ise 1 olduğu durum genellikle tercih edilir.</li>\n<li>Yüksek <em>bias</em>, veya ortalamanın yüksek olması nöronların hassasiyetlerini yitirmesi ve aşırı durumlarda ağırlık veya <em>loss</em> değerinin taşma yapmasına sebep olabilir.</li>\n<li>Küçük scale veya varyansın düşük olması durumunda nöronlar hem hassasiyetlerini kaybeder, hem de eğitim çok daha uzun sürer.</li>\n</ul>\n<h2 id=\"Odevler\"><a href=\"#Odevler\" class=\"headerlink\" title=\"Ödevler\"></a>Ödevler</h2><ul>\n<li>Negatif <em>bias</em> durumunda ağın performansı nasıl etkileniyor?</li>\n<li><em>Scale</em>‘in gereğinden büyük olması durumunda ağın performansı nasıl etkileniyor?</li>\n<li>Aynı deneyleri gürültü miktarını 0.2 olarak ayarlayıp tekrarlayın. Bu durumda ne değişiyor?</li>\n</ul>\n"},{"title":"Tensorflow ve Keras kurulumu","date":"2017-08-03T20:32:21.000Z","_content":"Bu yazıda Tensorflow ve Keras'ı benim kullandığım şekilde kurmayı anlatacağım. Her ne kadar hem Tensorflow hem de Keras OSX ve Windows destekliyor olsa da hayatın kısa ve acımasız olduğunu göz önüne alarak Virtual Machine bile olsa Ubuntu veya türevi (Lubuntu, Xubuntu vs.) bir sistemde çalışmanızı öneririm.\n\nAşağıda Tensorflow'un orjinal kurulum dökümanlarının linklerini verdim. Ben aşağıda kendi kullandığım gibi, Ubuntu üzerinde, virtual environment ile ve tüm hesaplamaları CPU'da yapacak şekilde kurulumunu anlatacağım. Minimum 4-5 senelik bir CPUya da bir taşın sabrına sahipseniz burada yayınlayacağım tüm deneyleri bu kurulumla makul sürelerde eğitebilirsiniz.\n\n[Tensorflow Ubuntu Kurulum](https://www.tensorflow.org/install/install_linux \"Installing TensorFlow on Ubuntu\")\n[Tensorflow OSX Kurulum](https://www.tensorflow.org/install/install_mac \"Installing TensorFlow on Mac OS X\")\n[Tensorflow Windows Kurulum](Installing TensorFlow on Windows \"Installing TensorFlow on Windows\")\n\n# Tensorflow\n\nBu şekilde yaptığımız kurulumda Python'un paket yöneticisi olan pip ile kurduğumuz tüm paketler bir *virtual environment* içinde kalacak. Aynı makinada başka Python projeleriyle de ilgileniyorsaniz olası versiyon çakışmaları gibi şeyleri engellmesi açısından faydalı.\n\nBurada *virtual environment*'i `~/tensorflow` dizinine kurduğumuzu varsaydım. Ama başka bir yere kurmak istiyorsanız komutlardaki dizini değiştirebilirsiniz.\n\n1. Önce Python'u ve virtual environment yaratmak için ihtiyacımız olan paketleri kuralım.\n\n  `$ sudo apt-get install python-pip python-dev python-virtualenv`\n\n2. Şimdi içine kurulum yapacağımız *virtual environment*'i yaratalım.\n\n  `$ virtualenv --system-site-packages ~/tensorflow`\n\n3. Yarattığımız *virtual environment*'a geçiyoruz.\n\n  `$ source ~/tensorflow/bin/activate`\n\n  Bu işlemi tensorflow'u kullanmak istediğiniz tüm terminallerde yapmanız gerekli. Bu komutu çalıştırınca aşağıdaki bash prompt'unuz aşağıdaki gibi gözükecek. Bu bize tensorflow environment'ının içinde olduğumuzu gösteriyor.\n\n  `(tensorflow)$ `\n\n4. Öncelikle elimizdeki muhtemelen eski olan pip versiyonunu güncelleyelim:\n\n  `(tensorflow)$ pip install --upgrade pip`\n\n5. Şimdi pip kullanarak tensorflow'u kuruyoruz.\n\n  `(tensorflow)$ pip install --upgrade tensorflow`\n\n  Kurulum dökümanı bu komutun bazen patladığını söylüyor. Eğer sizde de çalışmazsa aşağıdaki komutu deneyin:\n\n  ```\n  (tensorflow)$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.1-cp27-none-linux_x86_64.whl\n  ```\n6. Machine learning'çilerin favorisi Jupyter Notebook'u da kuralım.\n\n  `(tensorflow)$ pip install --upgrade jupyter`\n\nArtık Jupyter Notebook içinde veya direkt olarak Python'da Tensorflow kütüphanesini kullanabilir haldeyiz.\n\n# Keras\n\nTensorflow harika bir machine learning kütüphanesi. Tensorflow'u kullanarak okuduğunuz (ve benim aksime matematiğini anlamayı başardığınız herhangi bir *state-of-the-art* machine learning makalesini implemente edebilirsiniz. Ama ne yazık ki benim gibi bu işe yeni başlayanlar ve matematik altyapısı zayıf olanlar için biraz fazla low-level kalıyor.\n\nKeras, Tensorflow veya Theano üzerinde çalışabilen daha üst seviye (high level) bir kütüphane. Sık kullanılan Machine Learning katmanları ve *optimizerlar* gibi şeyler zaten Keras'ın içinde tanımlanmış durumda. Bu da işimizi çok kolaylaştıracak. Yine pip ile kurulabiliyor.\n\n`(tensorflow)$ pip install --upgrade keras`\n\nKeras'ı da kurduktan sonra artık kendimize bir çalışma dizini oluşturup, jupyter'i açarak birşeyler yazmaya başlayabiliriz.\n\n```\n(tensorflow)$ mkdir notebook && cd notebook\n(tensorflow)$ jupyter-notebook\n```\n\nBu komutu çalıştırdığınız sistemin varsayılan tarayıcısında jupyter notebook açılacak.\n\n---\n\nBir sonraki yazıda ilk neural network'ümüzü eğiteceğiz.\n","source":"_posts/Tensorflow-ve-Keras-kurulumu.md","raw":"---\ntitle: Tensorflow ve Keras kurulumu\ndate: 2017-08-03 23:32:21\ntags:\n---\nBu yazıda Tensorflow ve Keras'ı benim kullandığım şekilde kurmayı anlatacağım. Her ne kadar hem Tensorflow hem de Keras OSX ve Windows destekliyor olsa da hayatın kısa ve acımasız olduğunu göz önüne alarak Virtual Machine bile olsa Ubuntu veya türevi (Lubuntu, Xubuntu vs.) bir sistemde çalışmanızı öneririm.\n\nAşağıda Tensorflow'un orjinal kurulum dökümanlarının linklerini verdim. Ben aşağıda kendi kullandığım gibi, Ubuntu üzerinde, virtual environment ile ve tüm hesaplamaları CPU'da yapacak şekilde kurulumunu anlatacağım. Minimum 4-5 senelik bir CPUya da bir taşın sabrına sahipseniz burada yayınlayacağım tüm deneyleri bu kurulumla makul sürelerde eğitebilirsiniz.\n\n[Tensorflow Ubuntu Kurulum](https://www.tensorflow.org/install/install_linux \"Installing TensorFlow on Ubuntu\")\n[Tensorflow OSX Kurulum](https://www.tensorflow.org/install/install_mac \"Installing TensorFlow on Mac OS X\")\n[Tensorflow Windows Kurulum](Installing TensorFlow on Windows \"Installing TensorFlow on Windows\")\n\n# Tensorflow\n\nBu şekilde yaptığımız kurulumda Python'un paket yöneticisi olan pip ile kurduğumuz tüm paketler bir *virtual environment* içinde kalacak. Aynı makinada başka Python projeleriyle de ilgileniyorsaniz olası versiyon çakışmaları gibi şeyleri engellmesi açısından faydalı.\n\nBurada *virtual environment*'i `~/tensorflow` dizinine kurduğumuzu varsaydım. Ama başka bir yere kurmak istiyorsanız komutlardaki dizini değiştirebilirsiniz.\n\n1. Önce Python'u ve virtual environment yaratmak için ihtiyacımız olan paketleri kuralım.\n\n  `$ sudo apt-get install python-pip python-dev python-virtualenv`\n\n2. Şimdi içine kurulum yapacağımız *virtual environment*'i yaratalım.\n\n  `$ virtualenv --system-site-packages ~/tensorflow`\n\n3. Yarattığımız *virtual environment*'a geçiyoruz.\n\n  `$ source ~/tensorflow/bin/activate`\n\n  Bu işlemi tensorflow'u kullanmak istediğiniz tüm terminallerde yapmanız gerekli. Bu komutu çalıştırınca aşağıdaki bash prompt'unuz aşağıdaki gibi gözükecek. Bu bize tensorflow environment'ının içinde olduğumuzu gösteriyor.\n\n  `(tensorflow)$ `\n\n4. Öncelikle elimizdeki muhtemelen eski olan pip versiyonunu güncelleyelim:\n\n  `(tensorflow)$ pip install --upgrade pip`\n\n5. Şimdi pip kullanarak tensorflow'u kuruyoruz.\n\n  `(tensorflow)$ pip install --upgrade tensorflow`\n\n  Kurulum dökümanı bu komutun bazen patladığını söylüyor. Eğer sizde de çalışmazsa aşağıdaki komutu deneyin:\n\n  ```\n  (tensorflow)$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.1-cp27-none-linux_x86_64.whl\n  ```\n6. Machine learning'çilerin favorisi Jupyter Notebook'u da kuralım.\n\n  `(tensorflow)$ pip install --upgrade jupyter`\n\nArtık Jupyter Notebook içinde veya direkt olarak Python'da Tensorflow kütüphanesini kullanabilir haldeyiz.\n\n# Keras\n\nTensorflow harika bir machine learning kütüphanesi. Tensorflow'u kullanarak okuduğunuz (ve benim aksime matematiğini anlamayı başardığınız herhangi bir *state-of-the-art* machine learning makalesini implemente edebilirsiniz. Ama ne yazık ki benim gibi bu işe yeni başlayanlar ve matematik altyapısı zayıf olanlar için biraz fazla low-level kalıyor.\n\nKeras, Tensorflow veya Theano üzerinde çalışabilen daha üst seviye (high level) bir kütüphane. Sık kullanılan Machine Learning katmanları ve *optimizerlar* gibi şeyler zaten Keras'ın içinde tanımlanmış durumda. Bu da işimizi çok kolaylaştıracak. Yine pip ile kurulabiliyor.\n\n`(tensorflow)$ pip install --upgrade keras`\n\nKeras'ı da kurduktan sonra artık kendimize bir çalışma dizini oluşturup, jupyter'i açarak birşeyler yazmaya başlayabiliriz.\n\n```\n(tensorflow)$ mkdir notebook && cd notebook\n(tensorflow)$ jupyter-notebook\n```\n\nBu komutu çalıştırdığınız sistemin varsayılan tarayıcısında jupyter notebook açılacak.\n\n---\n\nBir sonraki yazıda ilk neural network'ümüzü eğiteceğiz.\n","slug":"Tensorflow-ve-Keras-kurulumu","published":1,"updated":"2017-08-07T17:30:02.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj62k19pj0002e4gc8ge1h2y1","content":"<p>Bu yazıda Tensorflow ve Keras’ı benim kullandığım şekilde kurmayı anlatacağım. Her ne kadar hem Tensorflow hem de Keras OSX ve Windows destekliyor olsa da hayatın kısa ve acımasız olduğunu göz önüne alarak Virtual Machine bile olsa Ubuntu veya türevi (Lubuntu, Xubuntu vs.) bir sistemde çalışmanızı öneririm.</p>\n<p>Aşağıda Tensorflow’un orjinal kurulum dökümanlarının linklerini verdim. Ben aşağıda kendi kullandığım gibi, Ubuntu üzerinde, virtual environment ile ve tüm hesaplamaları CPU’da yapacak şekilde kurulumunu anlatacağım. Minimum 4-5 senelik bir CPUya da bir taşın sabrına sahipseniz burada yayınlayacağım tüm deneyleri bu kurulumla makul sürelerde eğitebilirsiniz.</p>\n<p><a href=\"https://www.tensorflow.org/install/install_linux\" title=\"Installing TensorFlow on Ubuntu\" target=\"_blank\" rel=\"external\">Tensorflow Ubuntu Kurulum</a><br><a href=\"https://www.tensorflow.org/install/install_mac\" title=\"Installing TensorFlow on Mac OS X\" target=\"_blank\" rel=\"external\">Tensorflow OSX Kurulum</a><br><a href=\"Installing TensorFlow on Windows\" title=\"Installing TensorFlow on Windows\">Tensorflow Windows Kurulum</a></p>\n<h1 id=\"Tensorflow\"><a href=\"#Tensorflow\" class=\"headerlink\" title=\"Tensorflow\"></a>Tensorflow</h1><p>Bu şekilde yaptığımız kurulumda Python’un paket yöneticisi olan pip ile kurduğumuz tüm paketler bir <em>virtual environment</em> içinde kalacak. Aynı makinada başka Python projeleriyle de ilgileniyorsaniz olası versiyon çakışmaları gibi şeyleri engellmesi açısından faydalı.</p>\n<p>Burada <em>virtual environment</em>‘i <code>~/tensorflow</code> dizinine kurduğumuzu varsaydım. Ama başka bir yere kurmak istiyorsanız komutlardaki dizini değiştirebilirsiniz.</p>\n<ol>\n<li><p>Önce Python’u ve virtual environment yaratmak için ihtiyacımız olan paketleri kuralım.</p>\n<p><code>$ sudo apt-get install python-pip python-dev python-virtualenv</code></p>\n</li>\n<li><p>Şimdi içine kurulum yapacağımız <em>virtual environment</em>‘i yaratalım.</p>\n<p><code>$ virtualenv --system-site-packages ~/tensorflow</code></p>\n</li>\n<li><p>Yarattığımız <em>virtual environment</em>‘a geçiyoruz.</p>\n<p><code>$ source ~/tensorflow/bin/activate</code></p>\n<p>Bu işlemi tensorflow’u kullanmak istediğiniz tüm terminallerde yapmanız gerekli. Bu komutu çalıştırınca aşağıdaki bash prompt’unuz aşağıdaki gibi gözükecek. Bu bize tensorflow environment’ının içinde olduğumuzu gösteriyor.</p>\n<p><code>(tensorflow)$</code></p>\n</li>\n<li><p>Öncelikle elimizdeki muhtemelen eski olan pip versiyonunu güncelleyelim:</p>\n<p><code>(tensorflow)$ pip install --upgrade pip</code></p>\n</li>\n<li><p>Şimdi pip kullanarak tensorflow’u kuruyoruz.</p>\n<p><code>(tensorflow)$ pip install --upgrade tensorflow</code></p>\n<p>Kurulum dökümanı bu komutun bazen patladığını söylüyor. Eğer sizde de çalışmazsa aşağıdaki komutu deneyin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(tensorflow)$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.1-cp27-none-linux_x86_64.whl</div></pre></td></tr></table></figure>\n</li>\n<li><p>Machine learning’çilerin favorisi Jupyter Notebook’u da kuralım.</p>\n<p><code>(tensorflow)$ pip install --upgrade jupyter</code></p>\n</li>\n</ol>\n<p>Artık Jupyter Notebook içinde veya direkt olarak Python’da Tensorflow kütüphanesini kullanabilir haldeyiz.</p>\n<h1 id=\"Keras\"><a href=\"#Keras\" class=\"headerlink\" title=\"Keras\"></a>Keras</h1><p>Tensorflow harika bir machine learning kütüphanesi. Tensorflow’u kullanarak okuduğunuz (ve benim aksime matematiğini anlamayı başardığınız herhangi bir <em>state-of-the-art</em> machine learning makalesini implemente edebilirsiniz. Ama ne yazık ki benim gibi bu işe yeni başlayanlar ve matematik altyapısı zayıf olanlar için biraz fazla low-level kalıyor.</p>\n<p>Keras, Tensorflow veya Theano üzerinde çalışabilen daha üst seviye (high level) bir kütüphane. Sık kullanılan Machine Learning katmanları ve <em>optimizerlar</em> gibi şeyler zaten Keras’ın içinde tanımlanmış durumda. Bu da işimizi çok kolaylaştıracak. Yine pip ile kurulabiliyor.</p>\n<p><code>(tensorflow)$ pip install --upgrade keras</code></p>\n<p>Keras’ı da kurduktan sonra artık kendimize bir çalışma dizini oluşturup, jupyter’i açarak birşeyler yazmaya başlayabiliriz.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(tensorflow)$ mkdir notebook &amp;&amp; cd notebook</div><div class=\"line\">(tensorflow)$ jupyter-notebook</div></pre></td></tr></table></figure>\n<p>Bu komutu çalıştırdığınız sistemin varsayılan tarayıcısında jupyter notebook açılacak.</p>\n<hr>\n<p>Bir sonraki yazıda ilk neural network’ümüzü eğiteceğiz.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Bu yazıda Tensorflow ve Keras’ı benim kullandığım şekilde kurmayı anlatacağım. Her ne kadar hem Tensorflow hem de Keras OSX ve Windows destekliyor olsa da hayatın kısa ve acımasız olduğunu göz önüne alarak Virtual Machine bile olsa Ubuntu veya türevi (Lubuntu, Xubuntu vs.) bir sistemde çalışmanızı öneririm.</p>\n<p>Aşağıda Tensorflow’un orjinal kurulum dökümanlarının linklerini verdim. Ben aşağıda kendi kullandığım gibi, Ubuntu üzerinde, virtual environment ile ve tüm hesaplamaları CPU’da yapacak şekilde kurulumunu anlatacağım. Minimum 4-5 senelik bir CPUya da bir taşın sabrına sahipseniz burada yayınlayacağım tüm deneyleri bu kurulumla makul sürelerde eğitebilirsiniz.</p>\n<p><a href=\"https://www.tensorflow.org/install/install_linux\" title=\"Installing TensorFlow on Ubuntu\" target=\"_blank\" rel=\"external\">Tensorflow Ubuntu Kurulum</a><br><a href=\"https://www.tensorflow.org/install/install_mac\" title=\"Installing TensorFlow on Mac OS X\" target=\"_blank\" rel=\"external\">Tensorflow OSX Kurulum</a><br><a href=\"Installing TensorFlow on Windows\" title=\"Installing TensorFlow on Windows\">Tensorflow Windows Kurulum</a></p>\n<h1 id=\"Tensorflow\"><a href=\"#Tensorflow\" class=\"headerlink\" title=\"Tensorflow\"></a>Tensorflow</h1><p>Bu şekilde yaptığımız kurulumda Python’un paket yöneticisi olan pip ile kurduğumuz tüm paketler bir <em>virtual environment</em> içinde kalacak. Aynı makinada başka Python projeleriyle de ilgileniyorsaniz olası versiyon çakışmaları gibi şeyleri engellmesi açısından faydalı.</p>\n<p>Burada <em>virtual environment</em>‘i <code>~/tensorflow</code> dizinine kurduğumuzu varsaydım. Ama başka bir yere kurmak istiyorsanız komutlardaki dizini değiştirebilirsiniz.</p>\n<ol>\n<li><p>Önce Python’u ve virtual environment yaratmak için ihtiyacımız olan paketleri kuralım.</p>\n<p><code>$ sudo apt-get install python-pip python-dev python-virtualenv</code></p>\n</li>\n<li><p>Şimdi içine kurulum yapacağımız <em>virtual environment</em>‘i yaratalım.</p>\n<p><code>$ virtualenv --system-site-packages ~/tensorflow</code></p>\n</li>\n<li><p>Yarattığımız <em>virtual environment</em>‘a geçiyoruz.</p>\n<p><code>$ source ~/tensorflow/bin/activate</code></p>\n<p>Bu işlemi tensorflow’u kullanmak istediğiniz tüm terminallerde yapmanız gerekli. Bu komutu çalıştırınca aşağıdaki bash prompt’unuz aşağıdaki gibi gözükecek. Bu bize tensorflow environment’ının içinde olduğumuzu gösteriyor.</p>\n<p><code>(tensorflow)$</code></p>\n</li>\n<li><p>Öncelikle elimizdeki muhtemelen eski olan pip versiyonunu güncelleyelim:</p>\n<p><code>(tensorflow)$ pip install --upgrade pip</code></p>\n</li>\n<li><p>Şimdi pip kullanarak tensorflow’u kuruyoruz.</p>\n<p><code>(tensorflow)$ pip install --upgrade tensorflow</code></p>\n<p>Kurulum dökümanı bu komutun bazen patladığını söylüyor. Eğer sizde de çalışmazsa aşağıdaki komutu deneyin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(tensorflow)$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.2.1-cp27-none-linux_x86_64.whl</div></pre></td></tr></table></figure>\n</li>\n<li><p>Machine learning’çilerin favorisi Jupyter Notebook’u da kuralım.</p>\n<p><code>(tensorflow)$ pip install --upgrade jupyter</code></p>\n</li>\n</ol>\n<p>Artık Jupyter Notebook içinde veya direkt olarak Python’da Tensorflow kütüphanesini kullanabilir haldeyiz.</p>\n<h1 id=\"Keras\"><a href=\"#Keras\" class=\"headerlink\" title=\"Keras\"></a>Keras</h1><p>Tensorflow harika bir machine learning kütüphanesi. Tensorflow’u kullanarak okuduğunuz (ve benim aksime matematiğini anlamayı başardığınız herhangi bir <em>state-of-the-art</em> machine learning makalesini implemente edebilirsiniz. Ama ne yazık ki benim gibi bu işe yeni başlayanlar ve matematik altyapısı zayıf olanlar için biraz fazla low-level kalıyor.</p>\n<p>Keras, Tensorflow veya Theano üzerinde çalışabilen daha üst seviye (high level) bir kütüphane. Sık kullanılan Machine Learning katmanları ve <em>optimizerlar</em> gibi şeyler zaten Keras’ın içinde tanımlanmış durumda. Bu da işimizi çok kolaylaştıracak. Yine pip ile kurulabiliyor.</p>\n<p><code>(tensorflow)$ pip install --upgrade keras</code></p>\n<p>Keras’ı da kurduktan sonra artık kendimize bir çalışma dizini oluşturup, jupyter’i açarak birşeyler yazmaya başlayabiliriz.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(tensorflow)$ mkdir notebook &amp;&amp; cd notebook</div><div class=\"line\">(tensorflow)$ jupyter-notebook</div></pre></td></tr></table></figure>\n<p>Bu komutu çalıştırdığınız sistemin varsayılan tarayıcısında jupyter notebook açılacak.</p>\n<hr>\n<p>Bir sonraki yazıda ilk neural network’ümüzü eğiteceğiz.</p>\n"}],"PostAsset":[{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/1.png","slug":"1.png","post":"cj62k19pc0000e4gcqwerrmhf","modified":0,"renderable":0},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/2.png","slug":"2.png","post":"cj62k19pc0000e4gcqwerrmhf","modified":0,"renderable":0},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/3.png","slug":"3.png","post":"cj62k19pc0000e4gcqwerrmhf","modified":0,"renderable":0},{"_id":"source/_posts/101-Ilk-yapay-sinir-agimiz-Dense-layer/4.png","slug":"4.png","post":"cj62k19pc0000e4gcqwerrmhf","modified":0,"renderable":0},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/1.png","slug":"1.png","post":"cj62k19ph0001e4gclrhm9hpx","modified":0,"renderable":0},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/2.png","slug":"2.png","post":"cj62k19ph0001e4gclrhm9hpx","modified":0,"renderable":0},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/3.png","slug":"3.png","post":"cj62k19ph0001e4gclrhm9hpx","modified":0,"renderable":0},{"_id":"source/_posts/102-Veri-muhendisligi-y-de-bias-ve-scale/4.png","slug":"4.png","post":"cj62k19ph0001e4gclrhm9hpx","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}